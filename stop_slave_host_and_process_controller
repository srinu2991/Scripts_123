# Function to stop the slave host and process controller
function stop_slave_host_and_process_controller() {
    echo "**********************************"
    echo "Stopping slave host and process controller..."
    echo "**********************************"

    IFS=',' read -ra SERVERS <<< "$SERVERS_LIST"
    for server in "${SERVERS[@]}"; do
        echo "**********************************"
        echo "Stopping processes on slave server $server for environment: $environment_name"
        echo "**********************************"

        # Create a temporary script with the commands to run on the remote server
        remote_script=$(mktemp /tmp/remote_script_XXXXXX.sh)
        cat <<EOF > $remote_script
#!/bin/bash
echo "Listing processes for $environment_name on $server"
pids=\$(pgrep -f "$environment_name")
if [ -z "\$pids" ]; then
    echo "No processes found for $environment_name on $server"
else
    echo "Found processes for $environment_name on $server: \$pids"
    echo "Killing processes for $environment_name on $server with kill -9"
    kill -9 \$pids
    sleep 20
    echo "Checking if processes are killed on $server"
    pids=\$(pgrep -f "$environment_name")
    if [ -z "\$pids" ]; then
        echo "Successfully killed all processes on $server"
    else
        echo "Processes still running on $server: \$pids"
        echo "Killing processes for $environment_name on $server again with kill -9"
        kill -9 \$pids
        sleep 20
        pids=\$(pgrep -f "$environment_name")
        if [ -z "\$pids" ]; then
            echo "Successfully killed all processes on $server after second attempt"
        else
            echo "Failed to kill some processes on $server after second attempt"
        fi
    fi
fi
EOF

        # Copy the temporary script to the remote server
        scp $remote_script "$SSH_USER@$server:/tmp/remote_script.sh"
        scp_exit_status=$?
        if [ $scp_exit_status -ne 0 ]; then
            echo "Error copying script to $server with exit status $scp_exit_status"
            rm -f $remote_script
            continue
        fi

        # Run the script on the remote server
        ssh "$SSH_USER@$server" "bash /tmp/remote_script.sh"
        ssh_exit_status=$?
        if [ $ssh_exit_status -ne 0 ]; then
            echo "Error executing script on $server with exit status $ssh_exit_status"
            case $ssh_exit_status in
                255)
                    echo "SSH connection error: Server $server unreachable"
                    ;;
                127)
                    echo "SSH command execution error: Command not found"
                    ;;
                *)
                    echo "Unhandled SSH error. Check logs for more details."
                    ;;
            esac
        fi

        # Clean up the temporary script from the remote server
        ssh "$SSH_USER@$server" "rm -f /tmp/remote_script.sh"

        # Clean up the local temporary script
        rm -f $remote_script

        echo "**********************************"
        echo "Finished stopping processes on slave server $server."
        echo "**********************************"
    done

    echo "**********************************"
    echo "Stopping processes on master server for environment: $environment_name"
    echo "**********************************"
    pids=$(pgrep -f "$environment_name")
    if [ -z "$pids" ]; then
        echo "No processes found for $environment_name on master server"
    else
        echo "Found processes for $environment_name on master server: $pids"
        echo "Killing processes for $environment_name on master server with kill -9"
        kill -9 $pids
        sleep 20
        echo "Checking if processes are killed on master server"
        pids=$(pgrep -f "$environment_name")
        if [ -z "$pids" ]; then
            echo "Successfully killed all processes on master server"
        else
            echo "Processes still running on master server: $pids"
            echo "Killing processes for $environment_name on master server again with kill -9"
            kill -9 $pids
            sleep 20
            pids=$(pgrep -f "$environment_name")
            if [ -z "$pids" ]; then
                echo "Successfully killed all processes on master server after second attempt"
            else
                echo "Failed to kill some processes on master server after second attempt"
            fi
        fi
    fi
    echo "**********************************"
    echo "Finished stopping processes on master server."
    echo "**********************************"
}
