9commit check for ebms 123

hello


*******************

[WARNING]:  * Failed to parse /inventory.yml with script plugin: problem running
/inventory.yml --list ([Errno 8] Exec format error: '/inventory.yml')
[WARNING]:  * Failed to parse /inventory.yml with auto plugin: no root 'plugin' key found,
'/inventory.yml' is not a valid YAML inventory plugin config file
[WARNING]:  * Failed to parse /inventory.yml with yaml plugin: Invalid data from file, expected
dictionary and got:  hostname
[WARNING]:  * Failed to parse /inventory.yml with ini plugin: Invalid host pattern 'all:' supplied,
ending in ':' is not allowed, this character is reserved to provide a port.
[WARNING]: Unable to parse /inventory.yml as an inventory source
[WARNING]: No inventory was parsed, only implicit localhost is available
[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'



check this 
bash: -c: line 0: syntax error near unexpected token `)'



=======================================================


# Function to start process and host controller on master server
function start_process_and_host_controller_master() {
    echo "**********************************"
    echo "Starting process and host controller on master server..."
    echo "**********************************"

    if ! "$ENV_HOME/$environment_name/bin/jboss-cli.sh" --connect controller="$CONTROLLER_HOST":"$CONTROLLER_PORT" --user="$JBOSS_USER" --password="$JBOSS_PASSWORD" --command="/host=master:reload"; then
        echo "Failed to start process and host controller on master server"
        exit 1
    else
        echo "Successfully started process and host controller on master server"
    fi
}

# Function to start process and host controller on slave servers
function start_process_and_host_controller_slaves() {
    echo "**********************************"
    echo "Starting process and host controller on slave servers..."
    echo "**********************************"

    IFS=',' read -ra SERVERS <<<"$SERVERS_LIST"
    for server in "${SERVERS[@]}"; do
        echo "Starting process and host controller on slave server $server"

        local remote_command=$(cat <<EOF
"$ENV_HOME/$environment_name/bin/jboss-cli.sh" --connect controller="$CONTROLLER_HOST":"$CONTROLLER_PORT" --user="$JBOSS_USER" --password="$JBOSS_PASSWORD" --command="/host=$server:reload"
EOF
)

        ssh "$SSH_USER@$server" "$remote_command"

        local ssh_exit_status=$?
        if [ $ssh_exit_status -eq 0; then
            echo "Successfully started process and host controller on slave server $server"
        else
            echo "Failed to start process and host controller on slave server $server. Exit status: $ssh_exit_status"
        fi
    done
}


*******************************

# Function to check if server group JVMs are down and kill any running JVMs on master and slave servers
function check_and_kill_jvms_on_servers() {
    local environment_name="$1"

    echo "**********************************"
    echo "Checking if server group JVMs are down on master server for environment: $environment_name"
    echo "**********************************"

    # Use ps and grep to check for the JVM processes on the master server
    local jvm_status_master=$(pgrep -f "$environment_name" | xargs ps -o pid= -o args= | awk '/-D\[Server:/ {gsub(/^-D\[Server:/, ""); gsub(/\].*$/, ""); print $1, $6}')

    # Print the output (PID and JVM name) on the master server
    echo "$jvm_status_master"

    # Extract PID from the output on the master server (assuming PID is the first column)
    local pid_master=$(echo "$jvm_status_master" | awk '{print $1}')

    # Kill the process on the master server
    if [ -n "$pid_master" ]; then
        echo "Killing process with PID: $pid_master on the master server"
        kill -15 "$pid_master"
        sleep 5 # Wait a bit to give the process time to terminate
        if kill -0 "$pid_master" 2>/dev/null; then
            echo "Process $pid_master still running. Sending SIGKILL."
            kill -9 "$pid_master"
        else
            echo "Process $pid_master terminated successfully."
        fi
    else
        echo "No matching process found on the master server."
    fi

    # Loop through each slave server and check and kill JVMs
    IFS=',' read -ra SERVERS <<<"$SERVERS_LIST"
    for server in "${SERVERS[@]}"; do
        echo "**********************************"
        echo "Checking if server group JVMs are down on slave server $server for environment: $environment_name"
        echo "**********************************"

        # Define the remote command to be executed on the slave server
        local remote_command=$(cat <<EOF
pgrep -f "$environment_name" | xargs ps -o pid= -o args= | awk '/-D\[Server:/ {gsub(/^-D\[Server:/, ""); gsub(/\].*$/, ""); print \$1, \$6}' | while read -r pid jvm; do
    if [ -n "\$pid" ]; then
        echo "Killing process with PID: \$pid on slave server $server"
        kill -15 "\$pid"
        sleep 5 # Wait a bit to give the process time to terminate
        if kill -0 "\$pid" 2>/dev/null; then
            echo "Process \$pid still running. Sending SIGKILL."
            kill -9 "\$pid"
        else
            echo "Process \$pid terminated successfully."
        fi
    else
        echo "No matching process found on slave server $server."
    fi
done
EOF
)

        # Execute the command on the slave server via SSH
        ssh "$SSH_USER@$server" "$remote_command"

        local ssh_exit_status=$?
        if [ $ssh_exit_status -eq 0 ]; then
            echo "Command executed successfully on $server"
        else
            echo "Error executing command on $server. Exit status: $ssh_exit_status"
            case $ssh_exit_status in
                255)
                    echo "SSH connection error: Server $server unreachable"
                    # Handle unreachable server error
                    ;;
                127)
                    echo "SSH command execution error: Command not found"
                    # Handle command not found error
                    ;;
                *)
                    echo "Unhandled SSH error. Check logs for more details."
                    # Handle other SSH errors
                    ;;
            esac
        fi

        echo "**********************************"
        echo "Finished checking on slave server $server."
        echo "**********************************"
    done
}

####################################

function stop_slave_host_and_process_controller() {
    echo "**********************************"
    echo "Stopping slave host and process controller..."
    echo "**********************************"

    IFS=',' read -ra SERVERS <<<"$SERVERS_LIST"
    for server in "${SERVERS[@]}"; do
        echo "Stopping processes on slave server $server for environment: $environment_name"

        local remote_command=$(cat <<EOF
pkill -f "$environment_name"
sleep 15
pgrep -f "$environment_name" && pkill -9 -f "$environment_name" && echo "Forcefully killed remaining processes on $server" || echo "All processes terminated on $server"
EOF
)

        ssh "$SSH_USER@$server" "$remote_command"

        local ssh_exit_status=$?
        if [ $ssh_exit_status -eq 0 ]; then
            echo "Processes stopped successfully on $server"
        else
            echo "Error stopping processes on $server. Exit status: $ssh_exit_status"
        fi

        echo "**********************************"
        echo "Finished stopping processes on slave server $server."
        echo "**********************************"
    done

    echo "Stopping processes on master server for environment: $environment_name"
    pkill -f "$environment_name"
    sleep 15
    if pgrep -f "$environment_name"; then
        echo "Forcefully killing remaining processes on master server"
        pkill -9 -f "$environment_name"
    else
        echo "All processes terminated on master server"
    fi
}
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

$ENV_HOME/$environment_name/bin/domain.sh --host-config=host-master.xml -Djboss.domain.base.dir=$ENV_HOME/$environment_name/domain



5555555555555555555555555555555555

# Function to start process and host controller on master server
function start_process_and_host_controller_master() {
    echo "**********************************"
    echo "Starting process and host controller on master server..."
    echo "**********************************"

    if ! "$ENV_HOME/$environment_name/bin/domain.sh" --host-config=host-master.xml -Djboss.domain.base.dir="$ENV_HOME/$environment_name/domain"; then
        echo "Failed to start process and host controller on master server"
        exit 1
    else
        echo "Successfully started process and host controller on master server"
    fi
}

# Function to start process and host controller on slave servers
function start_process_and_host_controller_slaves() {
    echo "**********************************"
    echo "Starting process and host controller on slave servers..."
    echo "**********************************"

    IFS=',' read -ra SERVERS <<<"$SERVERS_LIST"
    for server in "${SERVERS[@]}"; do
        echo "Starting process and host controller on slave server $server"

        local remote_command=$(cat <<EOF
"$ENV_HOME/$environment_name/bin/domain.sh" --host-config=host-slave.xml -Djboss.domain.base.dir="$ENV_HOME/$environment_name/domain"
EOF
)

        ssh "$SSH_USER@$server" "$remote_command"

        local ssh_exit_status=$?
        if [ $ssh_exit_status -eq 0 ]; then
            echo "Successfully started process and host controller on slave server $server"
        else
            echo "Failed to start process and host controller on slave server $server. Exit status: $ssh_exit_status"
        fi
    done
}

⁴⁴444444⁴444444444444444


function stop_slave_host_and_process_controller() {
    echo "**********************************"
    echo "Stopping slave host and process controller..."
    echo "**********************************"

    IFS=',' read -ra SERVERS <<<"$SERVERS_LIST"
    for server in "${SERVERS[@]}"; do
        echo "Stopping processes on slave server $server for environment: $environment_name"

        local remote_command=$(cat <<EOF
pkill -f "$environment_name"
sleep 15
pgrep -f "$environment_name" && pkill -9 -f "$environment_name" && echo "Forcefully killed remaining processes on $server" || echo "All processes terminated on $server"
EOF
)

        ssh -o ConnectTimeout=10 "$SSH_USER@$server" "$remote_command" || { echo "Error connecting to $server"; continue; }

        local ssh_exit_status=$?
        if [ $ssh_exit_status -eq 0 ]; then
            echo "Processes stopped successfully on $server"
        else
            echo "Error stopping processes on $server. Exit status: $ssh_exit_status"
        fi

        echo "**********************************"
        echo "Finished stopping processes on slave server $server."
        echo "**********************************"
    done

    echo "Stopping processes on master server for environment: $environment_name"
    pkill -f "$environment_name"
    sleep 15
    if pgrep -f "$environment_name"; then
        echo "Forcefully killing remaining processes on master server"
        pkill -9 -f "$environment_name"
    else
        echo "All processes terminated on master server"
    fi
}

stop_slave_host_and_process_controller



⁶66666666666666


# Function to start process and host controller on master server
function start_process_and_host_controller_master() {
    echo "**********************************"
    echo "Starting process and host controller on master server..."
    echo "**********************************"

    if ! "$ENV_HOME/$environment_name/bin/domain.sh" --host-config=host-master.xml -Djboss.domain.base.dir="$ENV_HOME/$environment_name/domain" &; then
        echo "Failed to start process and host controller on master server"
        exit 1
    else
        echo "Successfully started process and host controller on master server"
    fi

    # Sleep for 20 seconds to allow the process to start
    sleep 20

    # Check if the process is running
    if ps aux | grep "$environment_name" | grep "domain.sh" > /dev/null; then
        echo "Process is running on master server"
    else
        echo "Process failed to start on master server"
        exit 1
    fi
}

# Function to start process and host controller on slave servers
function start_process_and_host_controller_slaves() {
    echo "**********************************"
    echo "Starting process and host controller on slave servers..."
    echo "**********************************"

    IFS=',' read -ra SERVERS <<<"$SERVERS_LIST"
    for server in "${SERVERS[@]}"; do
        echo "Starting process and host controller on slave server $server"

        local remote_command=$(cat <<EOF
"$ENV_HOME/$environment_name/bin/domain.sh" --host-config=host-slave.xml -Djboss.domain.base.dir="$ENV_HOME/$environment_name/domain" &
EOF
)

        ssh "$SSH_USER@$server" "$remote_command"

        local ssh_exit_status=$?
        if [ $ssh_exit_status -eq 0 ]; then
            echo "Successfully started process and host controller on slave server $server"
        else
            echo "Failed to start process and host controller on slave server $server. Exit status: $ssh_exit_status"
        fi

        # Sleep for 20 seconds to allow the process to start
        sleep 20

        # Check if the process is running
        if ssh "$SSH_USER@$server" ps aux | grep "$environment_name" | grep "domain.sh" > /dev/null; then
            echo "Process is running on slave server $server"
        else
            echo "Process failed to start on slave server $server"
        fi
    done
}

aaaaaaaaaaaaaaaaaaaaaaaaaaaaa


# Function to start process and host controller on master server
function start_process_and_host_controller_master() {
    echo "**********************************"
    echo "Starting process and host controller on master server..."
    echo "**********************************"

    if ! "$ENV_HOME/$environment_name/bin/domain.sh" --host-config=host-master.xml -Djboss.domain.base.dir="$ENV_HOME/$environment_name/domain" &; then
        echo "Failed to start process and host controller on master server"
        exit 1
    else
        echo "Successfully started process and host controller on master server"
    fi

    # Sleep for 20 seconds to allow the process to start
    sleep 20

    # Check if the process is running
    if ps aux | grep "$environment_name" | grep "domain.sh" > /dev/null; then
        echo "Process is running on master server"
    else
        echo "Process failed to start on master server"
        exit 1
    fi
}

# Function to start process and host controller on slave servers
function start_process_and_host_controller_slaves() {
    echo "**********************************"
    echo "Starting process and host controller on slave servers..."
    echo "**********************************"

    IFS=',' read -ra SERVERS <<<"$SERVERS_LIST"
    for server in "${SERVERS[@]}"; do
        echo "Starting process and host controller on slave server $server"

        local remote_command=$(cat <<EOF
"$ENV_HOME/$environment_name/bin/domain.sh" --host-config=host-slave.xml -Djboss.domain.base.dir="$ENV_HOME/$environment_name/domain" &
EOF
)

        ssh "$SSH_USER@$server" "$remote_command"

        local ssh_exit_status=$?
        if [ $ssh_exit_status -eq 0 ]; then
            echo "Successfully started process and host controller on slave server $server"
        else
            echo "Failed to start process and host controller on slave server $server. Exit status: $ssh_exit_status"
        fi

        # Sleep for 20 seconds to allow the process to start
        sleep 20

        # Check if the process is running
        if ssh "$SSH_USER@$server" ps aux | grep "$environment_name" | grep "domain.sh" > /dev/null; then
            echo "Process is running on slave server $server"
        else
            echo "Process failed to start on slave server $server"
        fi
    done
}


cccccccccccccccccccccccccccccccccc ccc 


# Function to start process and host controller on master server
function start_process_and_host_controller_master() {
    echo "**********************************"
    echo "Starting process and host controller on master server..."
    echo "**********************************"

    if ! "$ENV_HOME/$environment_name/bin/domain.sh" --host-config=host-master.xml -Djboss.domain.base.dir="$ENV_HOME/$environment_name/domain" &; then
        echo "Failed to start process and host controller on master server"
        exit 1
    else
        echo "Successfully started process and host controller on master server"
    fi

    # Sleep for 20 seconds to allow the process to start
    sleep 20

    # Check if the process is running
    if pgrep -f "$ENV_HOME/$environment_name/bin/domain.sh" > /dev/null; then
        echo "Process is running on master server"
    else
        echo "Process failed to start on master server"
        exit 1
    fi
}

# Function to start process and host controller on slave servers
function start_process_and_host_controller_slaves() {
    echo "**********************************"
    echo "Starting process and host controller on slave servers..."
    echo "**********************************"

    IFS=',' read -ra SERVERS <<<"$SERVERS_LIST"
    for server in "${SERVERS[@]}"; do
        echo "Starting process and host controller on slave server $server"

        local remote_command=$(cat <<EOF
"$ENV_HOME/$environment_name/bin/domain.sh" --host-config=host-slave.xml -Djboss.domain.base.dir="$ENV_HOME/$environment_name/domain" &
EOF
)

        ssh "$SSH_USER@$server" "$remote_command"

        local ssh_exit_status=$?
        if [ $ssh_exit_status -eq 0 ]; then
            echo "Successfully started process and host controller on slave server $server"
        else
            echo "Failed to start process and host controller on slave server $server. Exit status: $ssh_exit_status"
        fi

        # Sleep for 20 seconds to allow the process to start
        sleep 20

        # Check if the process is running
        if ssh "$SSH_USER@$server" pgrep -f "$ENV_HOME/$environment_name/bin/domain.sh" > /dev/null; then
            echo "Process is running on slave server $server"
        else
            echo "Process failed to start on slave server $server"
        fi
    done
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# Function to start process and host controller on master server
function start_process_and_host_controller_master() {
    echo "**********************************"
    echo "Starting process and host controller on master server..."
    echo "**********************************"

    if ! "$ENV_HOME/$environment_name/bin/domain.sh" --host-config=host-master.xml -Djboss.domain.base.dir="$ENV_HOME/$environment_name/domain" > "$ENV_HOME/$environment_name/boot.log" 2>&1 &; then
        echo "Failed to start process and host controller on master server"
        exit 1
    else
        echo "Successfully started process and host controller on master server"
    fi

    # Sleep for 20 seconds to allow the process to start
    sleep 20

    # Check if the process is running
    if pgrep -f "$ENV_HOME/$environment_name/bin/domain.sh" > /dev/null; then
        echo "Process is running on master server"
    else
        echo "Process failed to start on master server"
        exit 1
    fi
}

# Function to start process and host controller on slave servers
function start_process_and_host_controller_slaves() {
    echo "**********************************"
    echo "Starting process and host controller on slave servers..."
    echo "**********************************"

    IFS=',' read -ra SERVERS <<<"$SERVERS_LIST"
    for server in "${SERVERS[@]}"; do
        echo "Starting process and host controller on slave server $server"

        local remote_command=$(cat <<EOF
"$ENV_HOME/$environment_name/bin/domain.sh" --host-config=host-slave.xml -Djboss.domain.base.dir="$ENV_HOME/$environment_name/domain" > "$ENV_HOME/$environment_name/boot.log" 2>&1 &
EOF
)

        ssh "$SSH_USER@$server" "$remote_command"

        local ssh_exit_status=$?
        if [ $ssh_exit_status -eq 0 ]; then
            echo "Successfully started process and host controller on slave server $server"
        else
            echo "Failed to start process and host controller on slave server $server. Exit status: $ssh_exit_status"
        fi

        # Sleep for 20 seconds to allow the process to start
        sleep 20

        # Check if the process is running
        if ssh "$SSH_USER@$server" pgrep -f "$ENV_HOME/$environment_name/bin/domain.sh" > /dev/null; then
            echo "Process is running on slave server $server"
        else
            echo "Process failed to start on slave server $server"
        fi
    done
}
